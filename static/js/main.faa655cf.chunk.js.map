{"version":3,"sources":["components/SearchBar.jsx","components/AddBookmark.jsx","components/BookmarkList.jsx","api/api.js","App.js","reportWebVitals.js","index.js"],"names":["SearchBar","_ref","onSearch","onRetrieveAll","onAddClick","searchQuery","setSearchQuery","useState","searchType","setSearchType","React","createElement","className","type","placeholder","value","onChange","e","target","onClick","handleSearch","checked","AddBookmark","onClose","onAdd","title","setTitle","link","setLink","handleSubmit","BookmarkList","bookmarks","onDelete","onUpdate","editId","setEditId","newLink","setNewLink","map","bookmark","key","id","navigator","clipboard","writeText","concat","handleUpdate","API_URL","App","setBookmarks","showAddScreen","setShowAddScreen","loadAllBookmarks","async","data","response","fetch","method","ok","Error","json","fetchAllBookmarks","useEffect","query","fetchBookmarkById","fetchBookmarksByTitle","headers","body","JSON","stringify","createBookmark","deleteBookmark","updateBookmark","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.faa655cf.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./SearchBar.css\";\r\n\r\nconst SearchBar = ({ onSearch, onRetrieveAll, onAddClick }) => {\r\n    const [searchQuery, setSearchQuery] = useState(\"\");\r\n    const [searchType, setSearchType] = useState(\"id\");\r\n\r\n    const handleSearch = () => {\r\n        onSearch(searchQuery, searchType);\r\n    };\r\n\r\n    return (\r\n        <div className=\"search-bar-container\">\r\n            <div className=\"search-bar\">\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder=\"Search...\"\r\n                    value={searchQuery}\r\n                    onChange={(e) => setSearchQuery(e.target.value)}\r\n                    className=\"search-input\"\r\n                />\r\n                <button onClick={handleSearch} className=\"search-button\">Search</button>\r\n                <div className=\"radio-group\">\r\n                    <label>\r\n                        <input\r\n                            type=\"radio\"\r\n                            value=\"id\"\r\n                            checked={searchType === \"id\"}\r\n                            onChange={() => setSearchType(\"id\")}\r\n                        />\r\n                        Search by ID\r\n                    </label>\r\n                    <label>\r\n                        <input\r\n                            type=\"radio\"\r\n                            value=\"title\"\r\n                            checked={searchType === \"title\"}\r\n                            onChange={() => setSearchType(\"title\")}\r\n                        />\r\n                        Search by Title\r\n                    </label>\r\n                </div>\r\n                <button onClick={onRetrieveAll} className=\"retrieve-button\">Retrieve All</button>\r\n                <button onClick={onAddClick} className=\"add-button\">Add Bookmark</button>\r\n            </div>\r\n            <div className=\"info\">\r\n                Share button will copy the title and the link\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SearchBar;\r\n","import React, { useState } from \"react\";\r\nimport \"./AddBookmark.css\";\r\n\r\nconst AddBookmark = ({ onClose, onAdd }) => {\r\n    const [title, setTitle] = useState(\"\");\r\n    const [link, setLink] = useState(\"\");\r\n\r\n    const handleSubmit = () => {\r\n        onAdd({ title, link });\r\n        setTitle(\"\");\r\n        setLink(\"\");\r\n        onClose();\r\n    };\r\n\r\n    return (\r\n        <div className=\"overlay\">\r\n            <div className=\"add-bookmark-modal\">\r\n                <h2>Add Bookmark</h2>\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder=\"Title\"\r\n                    value={title}\r\n                    onChange={(e) => setTitle(e.target.value)}\r\n                    className=\"modal-input\"\r\n                />\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder=\"Link\"\r\n                    value={link}\r\n                    onChange={(e) => setLink(e.target.value)}\r\n                    className=\"modal-input\"\r\n                />\r\n                <div className=\"modal-actions\">\r\n                    <button onClick={handleSubmit} className=\"modal-button\">Add</button>\r\n                    <button onClick={onClose} className=\"modal-button\">Cancel</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AddBookmark;\r\n","import React, { useState } from \"react\";\r\nimport \"./BookmarkList.css\";\r\n\r\nconst BookmarkList = ({ bookmarks, onDelete, onUpdate }) => {\r\n    const [editId, setEditId] = useState(null);\r\n    const [newLink, setNewLink] = useState(\"\");\r\n\r\n    const handleUpdate = (id) => {\r\n        onUpdate(id, newLink);\r\n        setEditId(null);\r\n        setNewLink(\"\");\r\n    };\r\n\r\n    return (\r\n        <div className=\"bookmark-list\">\r\n            {bookmarks.map((bookmark) => (\r\n                <div key={bookmark.id} className=\"bookmark-card\">\r\n                    <h3>{bookmark.title}</h3>\r\n                    <p>{bookmark.link}</p>\r\n                    <div className=\"bookmark-actions\">\r\n                        <button onClick={() => onDelete(bookmark.id)}>Delete</button>\r\n                        <button\r\n                            onClick={() =>\r\n                                navigator.clipboard.writeText(`${bookmark.title} - ${bookmark.link}`)\r\n                            }\r\n                        >\r\n                            Share\r\n                        </button>\r\n                        {editId === bookmark.id ? (\r\n                            <div className=\"edit-section\">\r\n                                <input\r\n                                    type=\"text\"\r\n                                    value={newLink}\r\n                                    onChange={(e) => setNewLink(e.target.value)}\r\n                                    className=\"edit-input\"\r\n                                />\r\n                                <button onClick={() => handleUpdate(bookmark.id)}>Save</button>\r\n                            </div>\r\n                        ) : (\r\n                            <button onClick={() => setEditId(bookmark.id)}>Update</button>\r\n                        )}\r\n                    </div>\r\n                </div>\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default BookmarkList;\r\n","const API_URL = \"../../api\";\r\n\r\nexport const fetchAllBookmarks = async () => {\r\n    const response = await fetch(`${API_URL}/readAll.php`, {\r\n        method: \"GET\",\r\n    });\r\n    if (!response.ok) {\r\n        throw new Error(\"Failed to fetch bookmarks\");\r\n    }\r\n    return await response.json();\r\n};\r\n\r\nexport const fetchBookmarkById = async (id) => {\r\n    const response = await fetch(`${API_URL}/readOne.php?id=${id}`, {\r\n        method: \"GET\",\r\n    });\r\n    if (!response.ok) {\r\n        throw new Error(\"Failed to fetch bookmark by ID\");\r\n    }\r\n    return await response.json();\r\n};\r\n\r\nexport const fetchBookmarksByTitle = async (title) => {\r\n    const response = await fetch(`${API_URL}/readTitle.php?title=${title}`, {\r\n        method: \"GET\",\r\n    });\r\n    if (!response.ok) {\r\n        throw new Error(\"Failed to fetch bookmarks by title\");\r\n    }\r\n    return await response.json();\r\n};\r\n\r\nexport const createBookmark = async (bookmark) => {\r\n    const response = await fetch(`${API_URL}/create.php`, {\r\n        method: \"POST\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify(bookmark), \r\n    });\r\n    if (!response.ok) {\r\n        throw new Error(\"Failed to create bookmark\");\r\n    }\r\n    return await response.json();\r\n};\r\n\r\nexport const deleteBookmark = async (id) => {\r\n    const response = await fetch(`${API_URL}/delete.php`, {\r\n        method: \"DELETE\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\", \r\n        },\r\n        body: JSON.stringify({ id }),\r\n    });\r\n    if (!response.ok) {\r\n        throw new Error(\"Failed to delete bookmark\");\r\n    }\r\n    return await response.json();\r\n};\r\n\r\nexport const updateBookmark = async (id, title) => {\r\n    const response = await fetch(`${API_URL}/update.php`, {\r\n        method: \"PUT\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({ id, title }),\r\n    });\r\n    if (!response.ok) {\r\n        throw new Error(\"Failed to update bookmark\");\r\n    }\r\n    return await response.json();\r\n};\r\n","import React, { useState, useEffect } from \"react\";\nimport SearchBar from \"./components/SearchBar\";\nimport AddBookmark from \"./components/AddBookmark\";\nimport BookmarkList from \"./components/BookmarkList\";\nimport {\n  fetchAllBookmarks,\n  fetchBookmarkById,\n  fetchBookmarksByTitle,\n  createBookmark,\n  deleteBookmark,\n  updateBookmark,\n} from \"./api/api\";\n\nconst App = () => {\n  const [bookmarks, setBookmarks] = useState([]);\n  const [showAddScreen, setShowAddScreen] = useState(false);\n\n  const loadAllBookmarks = async () => {\n    const data = await fetchAllBookmarks();\n    setBookmarks(data);\n  };\n\n  const handleSearch = async (query, type) => {\n    if (type === \"id\") {\n      const data = await fetchBookmarkById(query);\n      setBookmarks([data]);\n    } else if (type === \"title\") {\n      const data = await fetchBookmarksByTitle(query);\n      setBookmarks(data);\n    }\n  };\n\n  const handleAdd = async (bookmark) => {\n    await createBookmark(bookmark);\n    loadAllBookmarks();\n  };\n\n  const handleDelete = async (id) => {\n    await deleteBookmark(id);\n    loadAllBookmarks();\n  };\n\n  const handleUpdate = async (id, link) => {\n    await updateBookmark(id, link);\n    loadAllBookmarks();\n  };\n\n  useEffect(() => {\n    loadAllBookmarks();\n  }, []);\n\n  return (\n    <div>\n      <SearchBar\n        onSearch={handleSearch}\n        onRetrieveAll={loadAllBookmarks}\n        onAddClick={() => setShowAddScreen(true)}\n      />\n      {showAddScreen && (\n        <AddBookmark\n          onClose={() => setShowAddScreen(false)}\n          onAdd={handleAdd}\n        />\n      )}\n      <BookmarkList\n        bookmarks={bookmarks}\n        onDelete={handleDelete}\n        onUpdate={handleUpdate}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}